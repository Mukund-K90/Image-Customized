<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Image Customizer</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.7.1/css/all.min.css"
        integrity="sha512-5Hs3dF2AEPkpNAR7UiOHba+lRSJNeM2ECkwxUIxC1Q/FLycGTbNapWXB4tP889k5T5Ju8fs4b1P5z/iB4nMfSQ=="
        crossorigin="anonymous" referrerpolicy="no-referrer" />
    <style>
        .container {
            max-width: 70%;
            margin: 0 auto;
            padding: 20px;
            height: auto;
        }

        .preview-container {
            position: relative;
            width: 100%;
            background: #f5f5f5;
            overflow: hidden;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 8% 0 6% 0;
            background-image: url(https://omgs.in/wp-content/uploads/2021/02/wall-c.jpg);
        }

        .size-buttons {
            display: flex;
            justify-content: space-around;
            margin-top: 20px;
        }

        .size-btn {
            padding: 8px 8px;
            border: 1px solid #ccc;
            background-color: #fff;
            cursor: pointer;
            border-radius: 15%;
            height: 5%;
        }

        .size-btn:hover {
            background-color: #f0f0f0;
        }

        .image-container {
            width: 600px;
            height: 450px;
            position: relative;
            display: flex;
            justify-content: center;
            align-items: center;
            overflow: hidden;
            background-color: #eaeaea;
            border: 2px solid #ccc;
            border-radius: 0;
        }

        .image-container.default::before {
            content: '\f03e';
            font-family: 'Font Awesome 5 Free';
            font-weight: 900;
            font-size: 36px;
            color: #bbb;
            text-align: center;
            display: flex;
            align-items: center;
            justify-content: center;
            height: 100%;
            width: 100%;
        }

        .preview-image {
            position: absolute;
            cursor: move;
            max-width: none;
            transform-origin: center;
        }

        .shape-options {
            margin-top: 5%;
            position: absolute;
            right: 10px;
            top: 50%;
            transform: translateY(-50%);
            display: flex;
            flex-direction: column;
            gap: 10px;
            height: 100%;
        }

        .shape-btn {
            width: 30px;
            height: 25px;
            background: #C1995D;
            border: none;
            cursor: pointer;
            box-shadow: 1px 1px 5px #808080;
        }

        .shape-btn.circle {
            border-radius: 50%;
            height: 30px;
        }

        .shape-btn.square {
            border-radius: 0;
        }

        .shape-btn.rect {
            border-radius: 5%;
            height: 20px;
        }

        .shape-btn.oval {
            border-radius: 50%;
            height: 20px;
        }

        .border-colors {
            position: absolute;
            top: 10px;
            right: 10px;
            display: flex;
            gap: 10px;
            width: 100%;
            justify-content: center;
        }

        .color-btn {
            width: 40px;
            height: 20px;
            font-size: 15px;
            padding: 10px;
            display: flex;
            justify-content: center;
            align-items: center;
            border-radius: 5px;
            cursor: pointer;
        }

        .controls {
            display: flex;
            gap: 10px;
            justify-content: center;
            margin: 20px 0;
            align-items: center;
        }

        .upload-btn {
            background: #FF5722;
            color: white;
            border: none;
            border-radius: 4px;
            padding: 10px 20px;
            cursor: pointer;
        }

        .upload {
            background: #DBDBDB;
            font-size: 20px;
            color: #000;
        }

        .upload:hover {
            background: #000;
            color: #f0f0f0;
        }

        .download {
            background: #03A9F4;
            font-size: 20px;
            border: 1px solid #f0f0f0;
        }

        .download:hover {
            background: #f0f0f0;
            font-size: 20px;
            color: #03A9F4;
            border: 1px solid #03A9F4;
        }

        #fileInput {
            display: none;
        }

        .size-indicator {
            position: absolute;
            background: black;
            color: white;
            padding: 5px 15px;
            border-radius: 20px;
            font-size: 14px;
        }

        .width-indicator {
            top: -30px;
            left: 50%;
            transform: translateX(-50%);
        }

        .height-indicator {
            left: -30px;
            top: 50%;
            transform: translateY(-50%) rotate(-90deg);
        }

        .circle-shape {
            border-radius: 50%;
            width: 400px;
            height: 400px;
        }

        .square-shape {
            height: 400px;
            width: 400px;
        }

        .oval-shape {
            border-radius: 50%;
            height: 400px;
            width: 500px;
        }

        .custom-shape {
            border-radius: 30% 70% 70% 30% / 30% 30% 70% 70%;
            height: 400px;
            width: 400px;
        }

        .rect-shape {
            border-radius: 5%;
            width: 500px;
            height: 300px;
        }

        .shape-btn.active {
            outline: 2px solid #03A9F4;
        }

        .size-btn.active {
            background-color: #03A9F4;
            font-weight: bold;
            color: #f0f0f0;
        }
    </style>
</head>

<body>
    <div class="container">
        <div class="preview-container">
            <!-- <div class="size-indicator width-indicator">Width 48 inch (121.92 cm)</div>
            <div class="size-indicator height-indicator">Height 36 inch (91.44 cm)</div> -->

            <div class="image-container square-shape" id="imageContainer">
                <img class="preview-image" id="previewImage" style="border: 5px solid white;"
                    src="https://images.unsplash.com/photo-1733287733098-11492d9920f7?q=80&w=2070&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D">
            </div>

            <div class="shape-options">
                <button class="shape-btn square active" data-shape="square"></button>
                <button class="shape-btn rect" data-shape="rect"></button>
                <button class="shape-btn circle" data-shape="circle"></button>
                <button class="shape-btn oval" data-shape="oval"></button>
                <button class="shape-btn" style="border-radius: 30% 70% 70% 30% / 30% 30% 70% 70%;"
                    data-shape="custom"></button>
            </div>

            <div class="border-colors">
                <button class="color-btn" style="border: none;">
                    <i class="fa-regular fa-image"></i>
                </button>
                <button class="color-btn" style="border: 10px groove #000000; ">
                    <i class="fa-regular fa-image"></i>
                </button>
                <button class="color-btn" style="border: 10px groove #E21E23; ">
                    <i class="fa-regular fa-image"></i>
                </button>
                <button class="color-btn" style=" border: 10px groove #FF5722; ">
                    <i class="fa-regular fa-image"></i>
                </button>
                <button class="color-btn" style="border: 10px groove #FFEB3B; ">
                    <i class="fa-regular fa-image"></i>
                </button>
                <button class="color-btn" style=" border: 10px groove #AE4A84; ">
                    <i class="fa-regular fa-image"></i>
                </button>

            </div>
        </div>
        <div class="controls">
            <input type="file" id="fileInput" accept="image/*">
            <button class="upload-btn upload" onclick="document.getElementById('fileInput').click()"><i
                    class="fa-solid fa-upload"></i></button>
            <!-- <button class="upload-btn" onclick="adjustZoom(1.1)">Zoom In</button>
            <button class="upload-btn" onclick="adjustZoom(0.9)">Zoom Out</button> -->
            <input type="range" id="zoomRange" min="0.5" max="3" step="0.1" value="1" style="width: 200px;">
            <button class="upload-btn download" id="downloadBtn"><i class="fa-solid fa-download"></i></button>
            <p>Size:</p>
            <button class="size-btn" data-ratio="12/9">12x9</button>
            <button class="size-btn" data-ratio="11/11">11x11</button>
            <button class="size-btn" data-ratio="16/12">16x12</button>
            <button class="size-btn" data-ratio="16/16">16x16</button>
            <button class="size-btn" data-ratio="21/15">21x15</button>
            <button class="size-btn" data-ratio="35/23">35x23</button>
            <button class="size-btn" data-ratio="48/36">48x36</button>
            <button class="upload-btn" id="removeBgBtn">Remove Background</button>

        </div>
    </div>

    <script>
        const imageContainer = document.getElementById('imageContainer');
        const previewImage = document.getElementById('previewImage');
        const fileInput = document.getElementById('fileInput');

        let isDragging = false;
        let currentX = 0;
        let currentY = 0;
        let initialX;
        let initialY;
        let xOffset = 0;
        let yOffset = 0;

        fileInput.addEventListener('change', function (e) {
            const file = e.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function (e) {
                    previewImage.src = e.target.result;
                    previewImage.style.display = 'block';
                    previewImage.style.transform = 'translate(0px, 0px) scale(1)'; 
                    centerImage(); // Center the image
                };
                reader.readAsDataURL(file);
            }
        });

        function centerImage() {
            previewImage.onload = function () {
                const containerRect = imageContainer.getBoundingClientRect();
                const imageRect = previewImage.getBoundingClientRect();

                const currentX = (containerRect.width - imageRect.width) / 2;
                const currentY = (containerRect.height - imageRect.height) / 2;

                previewImage.style.transform = `translate(${currentX}px, ${currentY}px) scale(1)`;
            };
        }

        document.querySelectorAll('.shape-btn').forEach(btn => {
            btn.addEventListener('click', function () {
                document.querySelectorAll('.shape-btn').forEach(button => button.classList.remove('active'));
                this.classList.add('active');
                const shape = this.dataset.shape;
                const imageContainer = document.querySelector('.image-container');

                imageContainer.classList.remove('circle-shape', 'square-shape', 'oval-shape', 'custom-shape', 'rect-shape');

                switch (shape) {
                    case 'circle':
                        imageContainer.classList.add('circle-shape');
                        break;
                    case 'square':
                        imageContainer.classList.add('square-shape');
                        break;
                    case 'oval':
                        imageContainer.classList.add('oval-shape');
                        break;
                    case 'custom':
                        imageContainer.classList.add('custom-shape');
                        break;
                    case 'rect':
                        imageContainer.classList.add('rect-shape');
                        break;
                }
            });
        });

        // Border color changing
        document.querySelectorAll('.color-btn').forEach(btn => {
            btn.addEventListener('click', function () {
                imageContainer.style.border = `${this.style.border}`;
            });
        });

        imageContainer.addEventListener('dblclick', dragStart);
        imageContainer.addEventListener('mousemove', drag);
        document.addEventListener('mouseup', dragEnd);

        function dragStart(e) {
            if (!isDragging) {
                isDragging = true;

                if (e.type === 'touchstart') {
                    initialX = e.touches[0].clientX - xOffset;
                    initialY = e.touches[0].clientY - yOffset;
                } else {
                    initialX = e.clientX - xOffset;
                    initialY = e.clientY - yOffset;
                }
            }
        }

        function drag(e) {
            if (isDragging) {
                e.preventDefault();

                if (e.type === 'touchmove') {
                    currentX = e.touches[0].clientX - initialX;
                    currentY = e.touches[0].clientY - initialY;
                } else {
                    currentX = e.clientX - initialX;
                    currentY = e.clientY - initialY;
                }

                xOffset = currentX;
                yOffset = currentY;

                updateImagePosition();
            }
        }

        function dragEnd() {
            if (isDragging) {
                isDragging = false;
            }
        }

        function updateImagePosition() {
            previewImage.style.transform = `translate(${currentX}px, ${currentY}px) scale(${scale})`;
        }

        const zoomRange = document.getElementById('zoomRange');
        let scale = 1;

        zoomRange.addEventListener('input', function () {
            scale = parseFloat(zoomRange.value);
            updateImagePosition();
        });

        function updateImagePosition() {
            previewImage.style.transform = `translate(${currentX}px, ${currentY}px) scale(${scale})`;
        }

        function centerImage() {
            previewImage.onload = function () {
                const containerRect = imageContainer.getBoundingClientRect();
                const imageRect = previewImage.getBoundingClientRect();

                currentX = (containerRect.width - imageRect.width) / 2;
                currentY = (containerRect.height - imageRect.height) / 2;
                xOffset = currentX;
                yOffset = currentY;

                updateImagePosition();
            }
        }

        const downloadBtn = document.getElementById('downloadBtn');

        downloadBtn.addEventListener('click', () => {
            html2canvas(imageContainer, { backgroundColor: null }).then((canvas) => {
                const link = document.createElement('a');
                link.download = 'customized-image.png';
                link.href = canvas.toDataURL('image/png');
                link.click();
            });
        });

        document.querySelectorAll('.size-btn').forEach(btn => {
            btn.addEventListener('click', function () {
                document.querySelectorAll('.size-btn').forEach(button => button.classList.remove('active'));
                this.classList.add('active');
                const ratio = this.dataset.ratio.split('/');
                const aspectWidth = parseFloat(ratio[0]);
                const aspectHeight = parseFloat(ratio[1]);

                let width = 600;
                let height = (600 * aspectHeight) / aspectWidth;

                const imageContainer = document.querySelector('.image-container');

                imageContainer.style.width = `${Math.round(width)}px`;
                imageContainer.style.height = `${Math.round(height)}px`;

                document.querySelectorAll('.circle-shape, .square-shape, .oval-shape, .custom-shape, .rect-shape').forEach(shape => {
                    if (shape.classList.contains('circle-shape')) {
                        shape.style.width = `${Math.round(height)}px`;
                        shape.style.height = `${Math.round(height)}px`;
                    }
                    else if (shape.classList.contains('rect-shape')) {
                        shape.style.width = `${Math.round(width)}px`;
                        shape.style.height = `${Math.round(width) - 100}px`;
                    }
                    else {
                        shape.style.width = `${Math.round(width)}px`;
                        shape.style.height = `${Math.round(height)}px`;
                    }
                });
            });
        });
        const removeBgBtn = document.getElementById('removeBgBtn');

        async function removeBg(blob) {
            const formData = new FormData();
            formData.append("size", "auto");
            formData.append("image_file", blob);

            const response = await fetch("https://api.remove.bg/v1.0/removebg", {
                method: "POST",
                headers: { "X-Api-Key": "6Lu6WfjPB2PVE7rw3tu3JaR2" },
                body: formData,
            });

            if (response.ok) {
                return await response.arrayBuffer();
            } else {
                throw new Error(`${response.status}: ${response.statusText}`);
            }
        }


        removeBgBtn.addEventListener('click', async () => {
            const imageBlob = await fetch(previewImage.src)
                .then(res => res.blob());

            try {
                const rbgResultData = await removeBg(imageBlob);

                const imageUrl = URL.createObjectURL(new Blob([rbgResultData], { type: 'image/png' }));

                previewImage.src = imageUrl;
            } catch (error) {
                console.error('Error removing background:', error);
                alert('Failed to remove background');
            }
        });

    </script>
</body>

</html>